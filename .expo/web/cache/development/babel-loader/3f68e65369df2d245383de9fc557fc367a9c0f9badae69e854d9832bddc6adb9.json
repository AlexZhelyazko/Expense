{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getFocusedRouteNameFromRoute;\nvar _useRouteCache = require(\"./useRouteCache\");\nfunction getFocusedRouteNameFromRoute(route) {\n  var _route$CHILD_STATE, _state$index;\n  var state = (_route$CHILD_STATE = route[_useRouteCache.CHILD_STATE]) != null ? _route$CHILD_STATE : route.state;\n  var params = route.params;\n  var routeName = state ? state.routes[(_state$index = state.index) != null ? _state$index : typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1].name : typeof (params === null || params === void 0 ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n  return routeName;\n}","map":{"version":3,"mappings":";;;;AAEA;AAEe,SAASA,4BAA4B,CAClDC,KAA6B,EACT;EAAA;EAEpB,IAAMC,KAAK,yBAAGD,KAAK,CAACE,0BAAW,CAAC,iCAAIF,KAAK,CAACC,KAAK;EAC/C,IAAME,MAAM,GAAGH,KAAK,CAACG,MAA0C;EAE/D,IAAMC,SAAS,GAAGH,KAAK,GAEnBA,KAAK,CAACI,MAAM,iBAGVJ,KAAK,CAACK,KAAK,2BACR,OAAOL,KAAK,CAACM,IAAI,KAAK,QAAQ,IAAIN,KAAK,CAACM,IAAI,KAAK,OAAO,GACrD,CAAC,GACDN,KAAK,CAACI,MAAM,CAACG,MAAM,GAAG,CAAC,CAC9B,CAACC,IAAI,GAER,QAAON,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEO,MAAM,MAAK,QAAQ,GAChCP,MAAM,CAACO,MAAM,GACbC,SAAS;EAEb,OAAOP,SAAS;AAClB","names":["getFocusedRouteNameFromRoute","route","state","CHILD_STATE","params","routeName","routes","index","type","length","name","screen","undefined"],"sources":["C:\\VS-Code\\Expense\\node_modules\\@react-navigation\\core\\src\\getFocusedRouteNameFromRoute.tsx"],"sourcesContent":["import type { Route } from '@react-navigation/routers';\n\nimport { CHILD_STATE } from './useRouteCache';\n\nexport default function getFocusedRouteNameFromRoute(\n  route: Partial<Route<string>>\n): string | undefined {\n  // @ts-expect-error: this isn't in type definitions coz we want this private\n  const state = route[CHILD_STATE] ?? route.state;\n  const params = route.params as { screen?: unknown } | undefined;\n\n  const routeName = state\n    ? // Get the currently active route name in the nested navigator\n      state.routes[\n        // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n        // The type property will only exist for rehydrated state and not for state from deep link\n        state.index ??\n          (typeof state.type === 'string' && state.type !== 'stack'\n            ? 0\n            : state.routes.length - 1)\n      ].name\n    : // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string'\n    ? params.screen\n    : undefined;\n\n  return routeName;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}