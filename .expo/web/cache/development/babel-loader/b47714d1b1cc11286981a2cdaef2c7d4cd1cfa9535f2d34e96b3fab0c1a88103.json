{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.statusCodes = exports.GoogleSigninSingleton = void 0;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _reactNative = require(\"react-native\");\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar RNGoogleSignin = _reactNative.NativeModules.RNGoogleSignin;\nvar IS_IOS = _reactNative.Platform.OS === 'ios';\nvar GoogleSignin = function () {\n  function GoogleSignin() {\n    (0, _classCallCheck2.default)(this, GoogleSignin);\n    _defineProperty(this, \"configPromise\", void 0);\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\"RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking. If you're using Expo, please use expo-google-sign-in. This is because Expo does not support custom native modules.\");\n    }\n  }\n  (0, _createClass2.default)(GoogleSignin, [{\n    key: \"signIn\",\n    value: function () {\n      var _signIn = (0, _asyncToGenerator2.default)(function* () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        yield this.configPromise;\n        return yield RNGoogleSignin.signIn(options);\n      });\n      function signIn() {\n        return _signIn.apply(this, arguments);\n      }\n      return signIn;\n    }()\n  }, {\n    key: \"hasPlayServices\",\n    value: function () {\n      var _hasPlayServices = (0, _asyncToGenerator2.default)(function* () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n          showPlayServicesUpdateDialog: true\n        };\n        if (IS_IOS) {\n          return true;\n        } else {\n          if (options && options.showPlayServicesUpdateDialog === undefined) {\n            throw new Error('RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`');\n          }\n          return RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog);\n        }\n      });\n      function hasPlayServices() {\n        return _hasPlayServices.apply(this, arguments);\n      }\n      return hasPlayServices;\n    }()\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (options.offlineAccess && !options.webClientId) {\n        throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n      }\n      this.configPromise = RNGoogleSignin.configure(options);\n    }\n  }, {\n    key: \"addScopes\",\n    value: function () {\n      var _addScopes = (0, _asyncToGenerator2.default)(function* (options) {\n        var isSignedIn = yield this.isSignedIn();\n        if (!isSignedIn) {\n          return null;\n        }\n        return IS_IOS ? RNGoogleSignin.addScopes(options) : RNGoogleSignin.getCurrentUser();\n      });\n      function addScopes(_x) {\n        return _addScopes.apply(this, arguments);\n      }\n      return addScopes;\n    }()\n  }, {\n    key: \"signInSilently\",\n    value: function () {\n      var _signInSilently = (0, _asyncToGenerator2.default)(function* () {\n        yield this.configPromise;\n        return RNGoogleSignin.signInSilently();\n      });\n      function signInSilently() {\n        return _signInSilently.apply(this, arguments);\n      }\n      return signInSilently;\n    }()\n  }, {\n    key: \"signOut\",\n    value: function () {\n      var _signOut = (0, _asyncToGenerator2.default)(function* () {\n        return RNGoogleSignin.signOut();\n      });\n      function signOut() {\n        return _signOut.apply(this, arguments);\n      }\n      return signOut;\n    }()\n  }, {\n    key: \"revokeAccess\",\n    value: function () {\n      var _revokeAccess = (0, _asyncToGenerator2.default)(function* () {\n        return RNGoogleSignin.revokeAccess();\n      });\n      function revokeAccess() {\n        return _revokeAccess.apply(this, arguments);\n      }\n      return revokeAccess;\n    }()\n  }, {\n    key: \"isSignedIn\",\n    value: function () {\n      var _isSignedIn = (0, _asyncToGenerator2.default)(function* () {\n        return RNGoogleSignin.isSignedIn();\n      });\n      function isSignedIn() {\n        return _isSignedIn.apply(this, arguments);\n      }\n      return isSignedIn;\n    }()\n  }, {\n    key: \"getCurrentUser\",\n    value: function () {\n      var _getCurrentUser = (0, _asyncToGenerator2.default)(function* () {\n        return RNGoogleSignin.getCurrentUser();\n      });\n      function getCurrentUser() {\n        return _getCurrentUser.apply(this, arguments);\n      }\n      return getCurrentUser;\n    }()\n  }, {\n    key: \"clearCachedAccessToken\",\n    value: function () {\n      var _clearCachedAccessToken = (0, _asyncToGenerator2.default)(function* (tokenString) {\n        if (!tokenString || typeof tokenString !== 'string') {\n          return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');\n        }\n        return IS_IOS ? null : yield RNGoogleSignin.clearCachedAccessToken(tokenString);\n      });\n      function clearCachedAccessToken(_x2) {\n        return _clearCachedAccessToken.apply(this, arguments);\n      }\n      return clearCachedAccessToken;\n    }()\n  }, {\n    key: \"getTokens\",\n    value: function () {\n      var _getTokens = (0, _asyncToGenerator2.default)(function* () {\n        if (IS_IOS) {\n          var tokens = yield RNGoogleSignin.getTokens();\n          return tokens;\n        } else {\n          var userObject = yield RNGoogleSignin.getTokens();\n          return {\n            idToken: userObject.idToken,\n            accessToken: userObject.accessToken\n          };\n        }\n      });\n      function getTokens() {\n        return _getTokens.apply(this, arguments);\n      }\n      return getTokens;\n    }()\n  }]);\n  return GoogleSignin;\n}();\nvar GoogleSigninSingleton = new GoogleSignin();\nexports.GoogleSigninSingleton = GoogleSigninSingleton;\nvar statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED\n};\nexports.statusCodes = statusCodes;","map":{"version":3,"mappings":"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","names":["RNGoogleSignin","NativeModules","IS_IOS","Platform","OS","GoogleSignin","constructor","_defineProperty","__DEV__","console","error","options","configPromise","signIn","showPlayServicesUpdateDialog","undefined","Error","playServicesAvailable","configure","offlineAccess","webClientId","isSignedIn","addScopes","getCurrentUser","signInSilently","signOut","revokeAccess","tokenString","Promise","reject","clearCachedAccessToken","tokens","getTokens","userObject","idToken","accessToken","GoogleSigninSingleton","statusCodes","SIGN_IN_CANCELLED","IN_PROGRESS","PLAY_SERVICES_NOT_AVAILABLE","SIGN_IN_REQUIRED"],"sources":["C:\\VS-Code\\Expense\\node_modules\\@react-native-google-signin\\google-signin\\lib\\module\\GoogleSignin.ts"],"sourcesContent":["import { NativeModules, Platform } from 'react-native';\nimport type {\n  AddScopesParams,\n  SignInParams,\n  ConfigureParams,\n  HasPlayServicesParams,\n  User,\n} from './types';\n\nconst { RNGoogleSignin } = NativeModules;\n\nconst IS_IOS = Platform.OS === 'ios';\n\nclass GoogleSignin {\n  configPromise?: Promise<void>;\n\n  constructor() {\n    if (__DEV__ && !RNGoogleSignin) {\n      console.error(\n        `RN GoogleSignin native module is not correctly linked. Please read the readme, setup and troubleshooting instructions carefully or try manual linking. If you're using Expo, please use expo-google-sign-in. This is because Expo does not support custom native modules.`,\n      );\n    }\n  }\n\n  async signIn(options: SignInParams = {}): Promise<User> {\n    await this.configPromise;\n    return await RNGoogleSignin.signIn(options);\n  }\n\n  async hasPlayServices(\n    options: HasPlayServicesParams = { showPlayServicesUpdateDialog: true },\n  ): Promise<boolean> {\n    if (IS_IOS) {\n      return true;\n    } else {\n      if (options && options.showPlayServicesUpdateDialog === undefined) {\n        throw new Error(\n          'RNGoogleSignin: Missing property `showPlayServicesUpdateDialog` in options object for `hasPlayServices`',\n        );\n      }\n      return RNGoogleSignin.playServicesAvailable(options.showPlayServicesUpdateDialog);\n    }\n  }\n\n  configure(options: ConfigureParams = {}): void {\n    if (options.offlineAccess && !options.webClientId) {\n      throw new Error('RNGoogleSignin: offline use requires server web ClientID');\n    }\n\n    this.configPromise = RNGoogleSignin.configure(options);\n  }\n\n  async addScopes(options: AddScopesParams): Promise<User | null> {\n    const isSignedIn = await this.isSignedIn();\n    if (!isSignedIn) {\n      return null;\n    }\n    return IS_IOS ? RNGoogleSignin.addScopes(options) : RNGoogleSignin.getCurrentUser();\n  }\n\n  async signInSilently(): Promise<User> {\n    await this.configPromise;\n    return RNGoogleSignin.signInSilently();\n  }\n\n  async signOut(): Promise<null> {\n    return RNGoogleSignin.signOut();\n  }\n\n  async revokeAccess(): Promise<null> {\n    return RNGoogleSignin.revokeAccess();\n  }\n\n  async isSignedIn(): Promise<boolean> {\n    return RNGoogleSignin.isSignedIn();\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    return RNGoogleSignin.getCurrentUser();\n  }\n\n  async clearCachedAccessToken(tokenString: string): Promise<null> {\n    if (!tokenString || typeof tokenString !== 'string') {\n      return Promise.reject('GoogleSignIn: clearCachedAccessToken() expects a string token.');\n    }\n    return IS_IOS ? null : await RNGoogleSignin.clearCachedAccessToken(tokenString);\n  }\n\n  async getTokens(): Promise<{ idToken: string; accessToken: string }> {\n    if (IS_IOS) {\n      const tokens = await RNGoogleSignin.getTokens();\n      return tokens;\n    } else {\n      const userObject = await RNGoogleSignin.getTokens();\n      return {\n        idToken: userObject.idToken,\n        accessToken: userObject.accessToken,\n      };\n    }\n  }\n}\n\nexport const GoogleSigninSingleton = new GoogleSignin();\n\nexport const statusCodes = {\n  SIGN_IN_CANCELLED: RNGoogleSignin.SIGN_IN_CANCELLED,\n  IN_PROGRESS: RNGoogleSignin.IN_PROGRESS,\n  PLAY_SERVICES_NOT_AVAILABLE: RNGoogleSignin.PLAY_SERVICES_NOT_AVAILABLE,\n  SIGN_IN_REQUIRED: RNGoogleSignin.SIGN_IN_REQUIRED,\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}